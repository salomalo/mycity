<?php

namespace backend\models;

use common\models\City;
use yii;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\web\IdentityInterface;

/**
 * Admin model
 *
 * @property integer $id
 * @property string $username
 * @property string $password_hash
 * @property string $auth_key
 * @property string $password_reset_token
 * @property string $access_token
 * @property integer $level
 * @property string $dateCreate
 *
 * @property string $password write only
 * @property array $citiesId
 * @property AdminCity[] $adminCities
 * @property City[] $cities
 */
class Admin extends ActiveRecord implements IdentityInterface
{
    public $cities_id;

    const LEVEL_SUPER_ADMIN = 0;
    
    public static $levels = [
        0 => 'Superadmin',
        1 => 'Admin',
    ];

    public static function tableName()
    {
        return 'admin';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username','auth_key','password_hash','password_reset_token','access_token', 'cities_id'], 'safe'],
            [['level'], 'integer'],
            [['level'], 'default', 'value' => 1],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Имя пользователя',
            'password_hash' => 'Пароль',
            'level' => 'Уровень',
            'auth_key' => 'Ключ авторизации',
            'access_token' => 'Токен',
            'password_reset_token' => 'Токен сброса пароля',
            'dateCreate' => 'Дата создания',
        ];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['dateCreate'],
                ],
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($this->cities_id and is_array($this->cities_id)) {
            foreach ($this->cities_id as $city_id) {
                $obj = new AdminCity(['city_id' => (int)$city_id, 'admin_id' => $this->id]);
                $obj->save();
            }
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            if ($this->isNewRecord) {
                $this->auth_key = \Yii::$app->security->generateRandomString();
            }

            if (!$this->isNewRecord) {
                AdminCity::deleteAll(['admin_id' => $this->id]);
            }

            return true;
        }
        return false;
    }

    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['access_token' => $token]);
    }

    /**
     * Finds user by username
     *
     * @param  string      $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username]);
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param  string  $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
         $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public static function getAll()
    {
        return ArrayHelper::map(self::find()->select(['id', 'username'])->asArray()->all(), 'id', 'username');
    }

    public function getAdminCities()
    {
        return $this->hasMany(AdminCity::className(), ['admin_id' => 'id']);
    }

    public function getCitiesId()
    {
        if (empty($this->cities_id)) {
            $this->cities_id = $this->getAdminCities()->select('city_id')->column();
        }
        return $this->cities_id;
    }
    
    public function getCities()
    {
        return $this->hasMany(City::className(), ['id' => 'city_id'])->viaTable(AdminCity::tableName(), ['admin_id' => 'id']);
    }

    public function afterFind()
    {
        $this->getCitiesId();
        parent::afterFind();
    }
}
